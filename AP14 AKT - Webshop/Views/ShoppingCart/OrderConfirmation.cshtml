@inject WebShopLib.Models.ApplicationDbContext _context
@model OrderConfirmationViewModel
@using WebShopLib.Models;

@{
    ViewData["Title"] = "Index";



}

@{

    decimal totalPrice = 0;
    decimal physicalPrice = 0;
    decimal totalPriceNew = 0;


}
<style>
    .form-check-input[type="radio"]:checked {
        background-color: red;
        border-color: red;
    }
</style>
<br />


<!-- Modal -->
<div class="modal fade" id="Modal" tabindex="-1" aria-labelledby="ModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <form asp-controller="User" asp-action="AddAddress" method="post">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="ModalLabel">Adresse hinzufügen</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="firstName">Vorname:</label>
                        <input type="text" class="form-control" id="firstName" name="firstName">
                    </div>
                    <div class="form-group">
                        <label for="lastName">Nachname:</label>
                        <input type="text" class="form-control" id="lastName" name="lastName">
                    </div>
                    <div class="form-group">
                        <label for="newAddressLine">Adresse:</label>
                        <input type="text" class="form-control" id="newAddressLine" name="AddressLine">
                    </div>
                    <div class="form-group">
                        <label for="newCity">Stadt:</label>
                        <input type="text" class="form-control" id="newCity" name="City">
                    </div>
                    <div class="form-group">
                        <label for="newZipcode">Postleitzahl:</label>
                        <input type="text" class="form-control" id="newZipcode" name="Zipcode">
                    </div>
                    <div class="form-group">
                        <label for="newCountry">Land:</label>
                        <input type="text" class="form-control" id="newCountry" name="Country">
                    </div>

                    @foreach (var item in Model.Addresses)
                    {

                        <input type="hidden" class="form-control" name="customerId" value=@item.CustomerId>
                    }





                    <input type="hidden" class="form-control" name="guid" value="@Context.Request.Cookies["guid"]">

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Schließen</button>
                    <button type="submit" class="btn btn-danger">Speichern</button>
                </div>
            </div>
        </form>

    </div>
</div>
<div class="container">
    <div class="row justify-content-center mb-3">
        <div class="col-md-12 col-xl-10">

            <h1>
                Bestellübersicht
            </h1>
            <hr />


        </div>

    </div>

</div>







@if (!Model.CartItems.Any())
{

    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">
                <h4>Es konnten keine Produkte gefunden werden.</h4>

            </div>

        </div>




    </div>


    <br />
    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <hr />
            </div>

        </div>

    </div>
    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <div class="float-end">
                    <p class="mb-0 me-5 d-flex align-items-center">
                        <span class="mediumtext-muted me-2">Gesamtpreis:</span> <h1>@Model.CartItems.Sum(ci => ci.Quantity * ci.Product.NetUnitPrice) €</h1>

                    </p>


                </div>

            </div>

        </div>
    </div>

    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <hr />
            </div>

        </div>

    </div>

    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <div class="d-flex justify-content-end">

                    <a href="~/Product/Index" class="btn btn-outline-danger btn-lg me-2">Einkauf fortzsetzen</a>
                    <button type="submit" class="btn btn-danger btn-lg">Zur Kasse</button>
                </div>

            </div>

        </div>
    </div>


}



else
{
    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">
                @if (TempData["PaymentError"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        @TempData["PaymentError"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
                @if (TempData["cashFlag"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        @TempData["cashFlag"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }


                @if (TempData["bankTransferFlag"] != null)
                {
                    <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                        @TempData["bankTransferFlag"]
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                }
            </div>
           
        </div>



    </div>

    @foreach (var cartItem in Model.CartItems)
    {


        <div class="container" data-aos="flip-left">
            <div class="row justify-content-center mb-3">
                <div class="col-md-12 col-xl-10">
                    <div class="card shadow-0 border rounded-3">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-12 col-lg-3 col-xl-3 mb-4 mb-lg-0">
                                    <div>


                                        @if (cartItem.Product.Images.Any())
                                        {
                                            var primaryImage = cartItem.Product.Images.Where(i => i.IsPrimaryPic).FirstOrDefault();
                                            if (primaryImage != null)
                                            {
                                                <img src="data:image/jpeg;base64,@Convert.ToBase64String(primaryImage.Picture)" class="w-100" />

                                            }
                                        }


                                    </div>
                                </div>
                                <div class="col-md-6 col-lg-6 col-xl-6">
                                    <h6>@cartItem.Product.ProductNumber</h6>
                                    <h5>@cartItem.Product.Name</h5>
                                    <p>
                                        @if (cartItem.Product.ProductCategory.Name == "Digital")
                                        {
                                            <span>digtal</span>


                                        }
                                        else
                                        {
                                            <span>physisch</span>
                                        }
                                    </p>
                                    <div class="d-flex ">
                                        <table>

                                            <tr>
                                                <td>
                                                    <h6 style="margin-top: 5px;" class="mb-1 me-1">
                                                        <input type="text" disabled style="border: none; color: black; font-weight: 500; padding-right: 20px; background-color: transparent; width: auto;" id="price-@cartItem.Id" size="3" value="@(string.Format("{0:0.00}", cartItem.Price *(1 + cartItem.Product.ProductCategory.TaxRate / 100))) €" />
                                                    </h6>
                                                </td>

                                                <td class="align-middle border-bottom-0">
                                                    <div class="d-flex flex-row">




                                                        <input type="number" min="1" name="quantity" value="@cartItem.Quantity" class="form-control form-control-sm" style="width: 50px;" required disabled />



                                                    </div>
                                                </td>

                                                <td>
                                                    <h6 style="margin-top: 5px; margin-left:30px;" class="mb-1 me-1">
                                                        <input type="text" disabled style="border: none; color: black; font-weight: 500; padding-right: 20px; background-color: transparent;" id="number-@cartItem.Id" value="@(string.Format("{0:0.00}", cartItem.Quantity * (cartItem.Price) * (1 + cartItem.Product.ProductCategory.TaxRate / 100))) €" />
                                                    </h6>
                                                    @{
                                                        if (cartItem.Product.ProductCategory.Name == "Physical")
                                                        {
                                                            physicalPrice += cartItem.Quantity * (cartItem.Price) * (1 + cartItem.Product.ProductCategory.TaxRate / 100);

                                                        }
                                                        totalPrice += cartItem.Quantity * (cartItem.Price) * (1 + cartItem.Product.ProductCategory.TaxRate / 100);
                                                        totalPriceNew += cartItem.Quantity * (cartItem.Price) * (1 + cartItem.Product.ProductCategory.TaxRate / 100);
                                                    }

                                                </td>
                                            </tr>

                                        </table>
                                    </div>


                                </div>





                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>



    }



    <br />
    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <hr />
            </div>

        </div>

    </div>
    <div class="container">
        <div class="row justify-content-center mb-3">
            <div class="col-md-12 col-xl-10">

                <div class="float-end">
                    <p class="mb-0 me-5 d-flex align-items-center">



                        @*                        calculates new total price depending if shoppingcart contains physical products or not
                    *@

                        @{
                            bool hasPhysicalItems = Model.CartItems.Any(ci => ci.Product.ProductCategory.Name == "Physical");
                            decimal shippingCost = 0;
                            decimal totalCost = Model.CartItems
                            .Where(ci => ci.Product.ProductCategory.Name == "Physical")
                            .Sum(ci => ci.Quantity * ci.Price);
                        }

                        <div id="codeBlock">
                            @{
                                if (hasPhysicalItems)
                                {
                                    if (physicalPrice < 50)
                                    {
                                        totalPrice += 4.99m;
                                        shippingCost = 4.99m;


                                        <span class="mediumtext-muted me-2">Gesamtpreis:</span>
                                        <h1>@(string.Format("{0:0.00}", totalPrice)) €</h1>
                                        <span class="mediumtext-muted me-2">inkl. 4,99 € Versandkosten</span>
                                    }
                                    else
                                    {
                                        shippingCost = 0;
                                        <span class="mediumtext-muted me-2">Gesamtpreis:</span>
                                        <h1>@(string.Format("{0:0.00}", totalPriceNew)) €</h1>
                                        <span class="mediumtext-muted me-2">Gratis Versand</span>
                                    }
                                }
                                else
                                {
                                    shippingCost = 0;
                                    <span class="mediumtext-muted me-2">Gesamtpreis:</span>
                                    <h1>@(string.Format("{0:0.00}", totalPriceNew)) €</h1>
                                    <span class="mediumtext-muted me-2">Gratis Versand</span>
                                }
                            }
                        </div>

                        <div id="pickupCode" style="display: none;">
                            <span class="mediumtext-muted me-2">Gesamtpreis:</span>
                            <h1>@(string.Format("{0:0.00}", totalPriceNew)) €</h1>

                            <span class="mediumtext-muted me-2">Abholung ausgewählt</span>

                        </div>



                    </p>


                </div>

            </div>

        </div>
    </div>



    @if (Model.Addresses.Any())
    {


        <form id="checkoutForm" asp-action="FinishPayment" method="post">
            <input type="hidden" name="shippingCost" value="@shippingCost" />

            <input type="hidden" name="customerid" value="@Model.CartItems.FirstOrDefault()?.ShoppingCart.CustomerId" />
            <input type="hidden" name="guid" value="@Context.Request.Cookies["guid"]" />
            <input type="hidden" name="id" value="@Model.CartItems.FirstOrDefault()?.ShoppingCartId" />


            <div class="container">
                <div class="row justify-content-center mb-3">
                    <div class="col-md-12 col-xl-10">


                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="deliveryOption" id="delivery" value="false" onchange="deliveryPayment()" checked>
                            <label class="form-check-label" for="delivery">
                                Lieferung
                            </label>
                            <div id="delivery-option-container">
                                <p class="text-muted">
                                    Bei einer Summe der nicht-digitalen Produkte unter €50 werden €4,99 Lieferkosten berechnet. Wählen Sie die Lieferadresse aus der gespeicherten Adressen aus: <br />
                                </p>
                                <p id="delivery-info"></p>
                                <div class="table-responsive">

                                    <table class="table">
                                        @*columns in the table do not match the contents*@
                                        <thead>
                                            <tr>
                                                <th>Lieferadresse</th>
                                                <th>PLZ</th>
                                                <th>Stadt</th>
                                                <th>Staat</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var address in Model.Addresses)
                                            {
                                                <tr>
                                                    <td><input type="radio" name="shippingAddress" value="@address.Id" checked /> @address.AddressLine <p>@address.FirstName @address.LastName</p></td>



                                                    <td>@address.Zipcode</td>

                                                    <td>@address.City</td>
                                                    <td>@address.Country</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                    <br>

                                </div>

                            </div>

                        </div>



                        <!-- Button trigger modal -->
                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#Modal">
                            Adresse hinzufügen
                        </button>






                        <button type="button" class="btn btn-danger" id="address-managment-button" onclick="location.href='@Url.Action("AddressManagement", "User")'">Adresse verwalten</button>
                        <br>
                        <br>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="deliveryOption" id="pickup" value="true" onchange="deliveryPayment()">
                            <label class="form-check-label" for="pickup">
                                Abholung im Shop
                            </label>
                        </div>
                        <br>

                        <h2>Zahlungsart</h2>
                        <div id="paymentOptions">
                            <div class="form-check" id="bankTransferOption1">
                                <input class="form-check-input" type="radio" name="paymentOption" id="bankTransferOption" value="bankTransfer" checked>
                                <label class="form-check-label" for="bankTransferOption">
                                    Überweisung (Bestellt, unbezahlt, nur für Lieferung)
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="paymentOption" id="creditCardOption" value="creditCard">
                                <label class="form-check-label" for="creditCardOption">
                                    Kreditkarte (Bestellt, bezahlt)
                                </label>
                            </div>
                            <div class="form-check" id="cashOption1">
                                <input class="form-check-input" type="radio" name="paymentOption" value="cash">
                                <label class="form-check-label" for="cashOption">
                                    Barzahlung (Bestellt, unbezahlt, nur bei Abholung im Shop)
                                </label>
                            </div>
                        </div>



                        <br>

                        <div id="bankTransferForm" class="payment-form">
                            <h2>Banküberweisung</h2>
                            <p>Bitte überweisen Sie den Gesamtbetrag an die folgende Bankverbindung:</p>




                            @using (var context = new ApplicationDbContext())
                            {
                                var store = context.Stores.FirstOrDefault(); // Retrieve the store from the database
                                <p>
                                    Kontoinhaber: @store?.Name<br>
                                    Bankname: @store?.BankName<br>
                                    IBAN: @store?.BankAccount<br>


                                </p>
                            }




                        </div>
                        <div id="creditCardForm" class="payment-form">
                            <h2>Kreditkarte</h2>
                            <div class="form-group">
                                <label for="cardholderName">Karteninhaber:</label>
                                <!-- to improve: cardholderName must be correct validated, only letters and space -->
                                <input type="text" class="form-control" id="cardholderName" name="cardholderName" oninput="validateInput(this)" required>
                            </div>
                            <div class="form-group">
                                <label for="cardNumber">Kartennummer:</label>
                                <input type="text" class="form-control" id="cardNumber" name="cardNumber" pattern="\d{4}\s\d{4}\s\d{4}\s\d{4}" maxlength="19" oninput="validateInput(this); formatCardNumber(this)" required>
                            </div>

                            <div class="form-group">
                                <label for="expirationDate">Ablaufdatum (MM/YY):</label>

                                <!-- to improve: MM must be correct validated -->
                                <input type="text" class="form-control" id="expirationDate" name="expirationDate" pattern="([0-9]{2}[/]?){2}" maxlength="5" oninput="validateInput(this); formatExpirationDate(this)" required>
                            </div>
                            <div class="form-group">
                                <label for="cvc">CVC:</label>
                                <input type="text" class="form-control" id="cvc" name="cvc" pattern="\d{3}" maxlength="3" oninput="validateInput(this); formatCVC(this)" required>

                            </div>

                        </div>


                        <div id="cashForm" class="payment-form">
                            <h2>Barzahlung</h2>


                            @using (var context = new ApplicationDbContext())
                            {
                                var store = context.Stores.FirstOrDefault(); // Retrieve the store from the database
                                <p>
                                    Bei Auswahl dieser Zahlungsmethode können Sie Ihre Bestellung bei Abholung im Shop bar bezahlen:<br />

                                    Name: @store?.Name<br>
                                    Addresse: @store?.Address<br>

                                </p>
                            }


                        </div>




                    </div>

                </div>
            </div>



            <div class="container">
                <div class="row justify-content-center mb-3">
                    <div class="col-md-12 col-xl-10">

                        <div class="d-flex justify-content-end">






                            <a href="~/Product/Index" class="btn btn-outline-danger btn-lg me-2">Einkauf fortzsetzen</a>
                            <button type="button" onclick="submitForm()" class="btn btn-danger btn-lg">Zur Kasse</button>

                        </div>

                    </div>

                </div>
            </div>


        </form>



    }






}
<script>
    // Function to submit the form
    function submitForm() {
        const form = document.getElementById('checkoutForm');
        form.submit();
    }
</script>



<script>
    // Function to handle delivery and pickup options
    function deliveryPayment() {
        const deliveryCheckbox = document.getElementById("delivery");
        const pickupCheckbox = document.getElementById("pickup");
        const codeBlockElement = document.getElementById("codeBlock");
        const pickupCodeElement = document.getElementById("pickupCode");
        const bankTransferOption1 = document.getElementById("bankTransferOption1");
        const cashOption1 = document.getElementById("cashOption1");



        // If pickup option is selected, show pickup code and hide delivery code
        if (pickupCheckbox.checked) {
            codeBlockElement.style.display = "none";
            pickupCodeElement.style.display = "block";

        }
        // If delivery option is selected, show delivery code and hide pickup code
        else if (deliveryCheckbox.checked) {
            codeBlockElement.style.display = "block";
            pickupCodeElement.style.display = "none";

        }
    }
</script>
<script>
    // Wait for the DOM to load
    document.addEventListener('DOMContentLoaded', function () {
        const paymentOptionInputs = document.querySelectorAll('#paymentOptions .form-check-input');
        const paymentForms = document.querySelectorAll('.payment-form');
        const deliveryOptionInputs = document.querySelectorAll('input[name="deliveryOption"]');
        const cashOption = document.querySelector('#cashOption');
        const newAddressForm = document.getElementById("new-address-form");

        // Function to update the visibility of payment forms based on selected payment option
        function updatePaymentFormsVisibility() {
            const selectedPaymentOption = document.querySelector('#paymentOptions .form-check-input:checked').value;

            for (const form of paymentForms) {
                if (form.id === `${selectedPaymentOption}Form`) {
                    form.style.display = 'block';
                } else {
                    form.style.display = 'none';
                }
            }
        }

        // Function to update the availability of cash payment option based on selected delivery option
        function updateCashOptionAvailability() {
            const selectedDeliveryOption = document.querySelector('input[name="deliveryOption"]:checked').value;
            const cashOption = document.querySelector('input[name="paymentOption"][value="cash"]');

            if (selectedDeliveryOption === 'delivery') {
                cashOption.closest('.form-check').style.display = 'none';

                // If cash option is selected for delivery, switch to bank transfer option
                if (cashOption.checked) {
                    document.querySelector('#bankTransferOption').checked = true;
                    updatePaymentFormsVisibility();
                }
            } else {
                cashOption.closest('.form-check').style.display = 'block';
            }
        }

        // Initial setup of forms visibility and cash option availability
        updatePaymentFormsVisibility();
        updateCashOptionAvailability();

        // Event listeners for payment option inputs
        for (const input of paymentOptionInputs) {
            input.addEventListener('change', updatePaymentFormsVisibility);
        }

        // Event listeners for delivery option inputs
        for (const input of deliveryOptionInputs) {
            input.addEventListener('change', updateCashOptionAvailability);
        }
    });

    // Credit card form functions

    function validateInput(input) {
        // Function to validate input fields
        if (input.validity.patternMismatch || input.validity.typeMismatch) {
            input.classList.add('input-error');
        } else {
            input.classList.remove('input-error');
        }
    }

    function formatCardNumber(input) {
        // Function to format card number input with spaces
        input.value = input.value.replace(/[^\d]/g, '').replace(/(.{4})/g, '$1 ').trim();
    }

    function formatExpirationDate(input) {
        // Function to format expiration date input with '/'
        const value = input.value.replace(/[^\d/]/g, '');
        let formattedValue = '';
        for (let i = 0; i < value.length; i++) {
            if (i === 2 && value[i] !== '/') {
                formattedValue += '/';
            }
            formattedValue += value[i];
        }
        if (formattedValue.length === 3 && value[value.length - 1] === '/') {
            formattedValue = formattedValue.slice(0, -1);
        } else if (formattedValue.length > 5) {
            formattedValue = formattedValue.slice(0, 5);
        }
        input.value = formattedValue;
    }

    function formatCVC(input) {
        // Function to format CVC input
        input.value = input.value.replace(/[^\d]/g, '').slice(0, 3);
    }
</script>