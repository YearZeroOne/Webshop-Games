@using WebShopLib.Models;
@model WebShopLib.Models.Product



@{
    ViewData["Title"] = "Details";
}



<style>


    .left-side-product-box img {
        width: 100%;
    }

    .left-side-product-box .sub-img img {
        margin-top: 5px;
        width: 83px;
        height: 100px;
    }


    p {
        margin: 0;
    }

    @@media (min-width:360px) and (max-width:640px) {
        .pro-box-section .pro-box img {
            height: auto;
        }
    }

    .buttonShake:hover {
        animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
        transform: translate3d(0, 0, 0);
        perspective: 1000px;
    }

    @@keyframes shake {
        10%, 90% {
            transform: translate3d(-1px, 0, 0);
        }

        20%, 80% {
            transform: translate3d(2px, 0, 0);
        }

        30%, 50%, 70% {
            transform: translate3d(-2px, 0, 0);
        }

        40%, 60% {
            transform: translate3d(2px, 0, 0);
        }
    }

</style>

<br />



@{
    // Error message when shopping cart == stock
    //int stock = Model.Stock;
    int quantity = 1;

}



<div class="container">
    @if (TempData["sumQuantityError"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            @TempData["sumQuantityError"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="row m-0">
        <div>
            <a asp-route-guid="@Context.Request.Cookies["guid"]" asp-controller="Product" asp-action="Index" class="btn btn-danger">Zurück</a>
        </div>
        <br />
        <br />
        <div class="col-lg-4 left-side-product-box pb-3">
            @if (Model.Images.Any())
            {
                var primaryImage = Model.Images.FirstOrDefault(i => i.IsPrimaryPic);
                if (primaryImage != null)
                {
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(primaryImage.Picture)" class="w-100" data-aos="zoom-in" />
                }
            }

            <div class="sub-img">

                @if (Model.Images.Any())
                {


                    foreach (var image in Model.Images.Where(i => !i.IsPrimaryPic))
                    {
                        <a data-bs-toggle="modal" data-bs-target="#lightboxModal" data-img-src="data:image/jpeg;base64,@Convert.ToBase64String(image.Picture)">
                            <img src="data:image/jpeg;base64,@Convert.ToBase64String(image.Picture)" class="border" style="object-fit: contain; max-width: 100%; max-height: 100%;" data-aos="zoom-in">
                        </a>
                    }
                }
            </div>


            <div class="modal fade" id="lightboxModal" tabindex="-1" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-body">
                            <img src="" class="img-fluid" id="lightboxImage">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8" data-aos="zoom-in">
            <div class=" p-3 m-0">
                <div class="row">
                    <div class="col-lg-12">

                        <h1>
                            @Html.DisplayFor(model => model.Name)
                        </h1>
                    </div>
                    <div class="col-lg-12">
                        <h1>
                            @(string.Format("{0:0.00}", Model.NetUnitPrice * (1 + Model.ProductCategory.TaxRate / 100)))
                            €
                        </h1>
                        <p>

                            @if (Model.IsActive == false)
                            {

                                <span>⭕ inaktiv</span>
                            }

                            else
                            {

                                @if (Model.Stock >= 9)
                                {
                                    <span style="color: green">&#x1F7E2; verfügbar</span>
                                }

                                else if (Model.Stock < 9 && Model.Stock > 0)
                                {
                                    <span style="color: orange">&#x1F7E0; wenig verfügbar</span>

                                }

                                else if (Model.Stock == 0)
                                {
                                    <span style="color: red">&#x1F534; nicht verfügbar</span>
                                }

                            }
                        </p>
                        <br />



                        @if (Model != null)
                        {
                            if (Model.ProductCategory.Name == "Digital")
                            {
                                <span style="font-weight: bold;">Produkart:</span> <span>digital</span>
                            }
                            else
                            {
                                <span style="font-weight: bold;">Produktart:</span> <span>physisch</span>

                            }
                        }

                        <p><b>ProduktNr: </b>@Html.DisplayFor(model => model.ProductNumber)</p>
                        <p><b>Kategorie: </b>@Html.DisplayFor(model => model.Genre.Name)</p>

                        <p>
                            <b>Hersteller: </b>@Html.DisplayFor(model => model.Developer.Name)
                        </p>
                        <br />
                    </div>

                    <div class="col-lg-12">
                        <h6>
                            @Html.DisplayFor(model => model.Description)

                        </h6>
                    </div>

                   
                    <div>
                        <div class="row col-lg-12 mt-2">
                            <form method="post" asp-action="AddToCartWithQuantity" class="d-flex flex-column">
                                <div class="col-lg-6 mb-2">
                                    <br />
                                    <h6>Menge :</h6>
                                    <input id="quantityInput" type="number" min="0" name="quantity" max="99" value="@quantity" class="form-control text-center w-100" placeholder="1" style="border-radius: 15px;" required>
                                </div>
                                <input type="hidden" name="price" value="@Model.NetUnitPrice" />

                                <input type="hidden" name="productId" value="@Model.Id" />
                                <input type="hidden" name="guid" value="@Context.Request.Cookies["guid"]" />



                                @if (Model.Stock == 0)
                                {
                                    <div class="col-lg-6 pb-2">
                                        <button class="btn btn-outline-danger  buttonShake w-100" type="button" style="border-radius: 15px;">
                                            Nicht verfügbar
                                        </button>
                                    </div>

                                }

                                else
                                {

                                    if (Model.IsActive == false)
                                    {
                                        <div class="col-lg-6 pb-2">

                                            <button class="btn btn-outline-dark  w-100 buttonShake" type="button" style="border-radius: 15px;">
                                                Inaktiv
                                            </button>
                                        </div>
                                    }

                                    else
                                    {
                                        <div class="col-lg-6 pb-2">

                                            <button type="submit" class="btn btn-danger w-100" style="border-radius: 15px;">
                                                Warenkorb hinzufügen
                                            </button>
                                        </div>

                                    }
                                }

                            </form>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get references to the modal and image elements
        const modal = document.getElementById('lightboxModal');
        const img = document.getElementById('lightboxImage');

        // Attach an event listener to the modal's show.bs.modal event
        modal.addEventListener('show.bs.modal', function (event) {
            const target = event.relatedTarget;
            const src = target.getAttribute('data-img-src');
            // Set the source attribute of the image element to display the selected image
            img.setAttribute('src', src);
        });
    });
</script>

<script>
    // Get a reference to the quantity input field
    var inputFeld = document.getElementById("quantityInput");

    // Attach a change event listener to the quantity input field
    inputFeld.addEventListener("change", (event) => {
        // Retrieve the entered quantity value
        var quant = document.getElementById("quantityInput").value;
        // Retrieve the maximum stock value from the input field attributes
        var maxpieces = document.getElementById("quantityInput").attributes["max"].value;

        var 

        // Check if the entered quantity equals the maximum stock value
        if (quant == (maxpieces) {
            // Display an alert message indicating that the maximum stock level has been reached
            alert('Maximaler Lagerbestand erreicht');
        }
    });
</script>
